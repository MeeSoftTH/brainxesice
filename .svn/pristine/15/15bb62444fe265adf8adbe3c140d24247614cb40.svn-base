//
//  GameViewController.swift
//  brainexecise
//
//  Created by Petch Temeeyasen on 5/19/15.
//  Copyright (c) 2015 meesoft. All rights reserved.
//

import WatchKit
import Foundation

protocol ModalGameOverDelegate {
    func gameOverDelegate(gameScore: GameScore!)
}

class GameViewController: WKInterfaceController, ModalBonusDelegate {
    
    var delegate: GameSelectionViewController?
    var mainGameDelegate: InterfaceController?
    var defaultColor: UIColor = UIColor(red: 120.0/255.0, green:63.0/255.0, blue:4.0/255.0, alpha:1.0)
    var selectedColor: UIColor = UIColor.brownColor()

    var gameSetting: GameSetting!
    var isPractice: Bool = false
    var trueSide: Int = 0
    var score: Int = 0
    var incorrect: Int = 0
    var correctCount: Int = 0
    var bonusProgress: Int = 0
    var star: Int=0
    var bonusMode: Int = 0
    
    var button1Title: String!
    var button2Title: String!
    
    var countDown = 3;
    var countDownTimer: NSTimer!
    var gameTimer: NSTimer!
    var isGameOver: Bool = false
    
    let gameQuestions1Lv1: [Question] = [Question(text: "0 + 1 = ?", choice1: "1", choice2: "2"),
        Question(text: "0 + 3 = ?", choice1: "3", choice2: "4"),
        Question(text: "1 + 1 = ?", choice1: "2", choice2: "3"),
        Question(text: "1 + 2 = ?", choice1: "3", choice2: "4"),
        Question(text: "1 + 5 = ?", choice1: "6", choice2: "7"),
        Question(text: "1 + 7 = ?", choice1: "8", choice2: "9"),
        Question(text: "1 + 8 = ?", choice1: "9", choice2: "10"),
        Question(text: "1 + 9 = ?", choice1: "10", choice2: "11"),
        Question(text: "2 + 1 = ?", choice1: "3", choice2: "4"),
        Question(text: "2 + 3 = ?", choice1: "5", choice2: "6"),
        Question(text: "2 + 5 = ?", choice1: "7", choice2: "8"),
        Question(text: "2 + 7 = ?", choice1: "9", choice2: "10"),
        Question(text: "3 + 1 = ?", choice1: "4", choice2: "5"),
        Question(text: "3 + 4 = ?", choice1: "7", choice2: "8"),
        Question(text: "3 + 5 = ?", choice1: "8", choice2: "9"),
        Question(text: "3 + 6 = ?", choice1: "9", choice2: "10"),
        Question(text: "3 + 8 = ?", choice1: "11", choice2: "12"),
        Question(text: "4 + 3 = ?", choice1: "7", choice2: "8"),
        Question(text: "4 + 5 = ?", choice1: "9", choice2: "10"),
        Question(text: "4 + 6 = ?", choice1: "10", choice2: "11"),
        Question(text: "4 + 8 = ?", choice1: "12", choice2: "13"),
        Question(text: "5 + 2 = ?", choice1: "7", choice2: "8"),
        Question(text: "5 + 3 = ?", choice1: "8", choice2: "9"),
        Question(text: "5 + 4 = ?", choice1: "9", choice2: "10"),
        Question(text: "5 + 6 = ?", choice1: "11", choice2: "12"),
        Question(text: "5 + 7 = ?", choice1: "12", choice2: "13"),
        Question(text: "5 + 8 = ?", choice1: "13", choice2: "14"),
        Question(text: "6 + 1 = ?", choice1: "7", choice2: "8"),
        Question(text: "6 + 2 = ?", choice1: "8", choice2: "9"),
        Question(text: "6 + 3 = ?", choice1: "9", choice2: "10"),
        Question(text: "6 + 4 = ?", choice1: "10", choice2: "11"),
        Question(text: "6 + 5 = ?", choice1: "11", choice2: "12"),
        Question(text: "6 + 7 = ?", choice1: "13", choice2: "14"),
        Question(text: "6 + 9 = ?", choice1: "15", choice2: "16"),
        Question(text: "7 + 1 = ?", choice1: "8", choice2: "9"),
        Question(text: "7 + 2 = ?", choice1: "9", choice2: "10"),
        Question(text: "7 + 3 = ?", choice1: "10", choice2: "11"),
        Question(text: "7 + 4 = ?", choice1: "11", choice2: "12"),
        Question(text: "7 + 5 = ?", choice1: "12", choice2: "13"),
        Question(text: "7 + 6 = ?", choice1: "13", choice2: "14"),
        Question(text: "8 + 3 = ?", choice1: "11", choice2: "12"),
        Question(text: "8 + 4 = ?", choice1: "12", choice2: "13"),
        Question(text: "8 + 5 = ?", choice1: "13", choice2: "14"),
        Question(text: "8 + 8 = ?", choice1: "16", choice2: "17"),
        Question(text: "8 + 9 = ?", choice1: "17", choice2: "18"),
        Question(text: "9 + 0 = ?", choice1: "9", choice2: "10"),
        Question(text: "9 + 2 = ?", choice1: "11", choice2: "12"),
        Question(text: "9 + 3 = ?", choice1: "12", choice2: "13"),
        Question(text: "9 + 6 = ?", choice1: "15", choice2: "16"),
        Question(text: "9 + 7 = ?", choice1: "16", choice2: "17")]
    
    let gameQuestions1Lv2: [Question] = [Question(text: "2 − 1 = ?", choice1: "1", choice2: "2"),
        Question(text: "1 + 2 = ?", choice1: "3", choice2: "4"),
        Question(text: "2 − 2 = ?", choice1: "0", choice2: "1"),
        Question(text: "2 + 3 = ?", choice1: "5", choice2: "6"),
        Question(text: "3 − 1 = ?", choice1: "2", choice2: "3"),
        Question(text: "2 + 7 = ?", choice1: "9", choice2: "10"),
        Question(text: "3 − 2 = ?", choice1: "1", choice2: "2"),
        Question(text: "3 + 5 = ?", choice1: "8", choice2: "9"),
        Question(text: "4 − 2 = ?", choice1: "2", choice2: "3"),
        Question(text: "3 + 6 = ?", choice1: "9", choice2: "10"),
        Question(text: "5 − 3 = ?", choice1: "2", choice2: "3"),
        Question(text: "4 + 5 = ?", choice1: "9", choice2: "1"),
        Question(text: "5 − 4 = ?", choice1: "1", choice2: "2"),
        Question(text: "4 + 7 = ?", choice1: "11", choice2: "12"),
        Question(text: "6 − 3 = ?", choice1: "3", choice2: "4"),
        Question(text: "5 + 7 = ?", choice1: "12", choice2: "13"),
        Question(text: "6 − 4 = ?", choice1: "2", choice2: "3"),
        Question(text: "5 + 8 = ?", choice1: "13", choice2: "14"),
        Question(text: "6 − 5 = ?", choice1: "1", choice2: "2"),
        Question(text: "6 + 8 = ?", choice1: "14", choice2: "15"),
        Question(text: "7 − 3 = ?", choice1: "4", choice2: "5"),
        Question(text: "7 + 1 = ?", choice1: "8", choice2: "9"),
        Question(text: "7 − 4 = ?", choice1: "3", choice2: "4"),
        Question(text: "7 + 4 = ?", choice1: "11", choice2: "12"),
        Question(text: "7 − 5 = ?", choice1: "2", choice2: "3"),
        Question(text: "7 + 5 = ?", choice1: "12", choice2: "13"),
        Question(text: "7 − 7 = ?", choice1: "0", choice2: "1"),
        Question(text: "7 + 6 = ?", choice1: "13", choice2: "14"),
        Question(text: "8 − 2 = ?", choice1: "6", choice2: "7"),
        Question(text: "8 + 3 = ?", choice1: "11", choice2: "12"),
        Question(text: "8 − 5 = ?", choice1: "3", choice2: "4"),
        Question(text: "8 + 5 = ?", choice1: "13", choice2: "14"),
        Question(text: "9 − 2 = ?", choice1: "7", choice2: "8"),
        Question(text: "8 + 6 = ?", choice1: "14", choice2: "15"),
        Question(text: "9 − 3 = ?", choice1: "6", choice2: "7"),
        Question(text: "8 + 7 = ?", choice1: "15", choice2: "16"),
        Question(text: "9 − 4 = ?", choice1: "5", choice2: "6"),
        Question(text: "8 + 8 = ?", choice1: "16", choice2: "18"),
        Question(text: "9 − 7 = ?", choice1: "2", choice2: "3"),
        Question(text: "8 + 9 = ?", choice1: "17", choice2: "18"),
        Question(text: "11 − 6 = ?", choice1: "5", choice2: "6"),
        Question(text: "9 + 2 = ?", choice1: "11", choice2: "12"),
        Question(text: "11 − 7 = ?", choice1: "4", choice2: "5"),
        Question(text: "9 + 3 = ?", choice1: "12", choice2: "13"),
        Question(text: "13 − 7 = ?", choice1: "6", choice2: "7"),
        Question(text: "9 + 6 = ?", choice1: "15", choice2: "16"),
        Question(text: "13 − 8 = ?", choice1: "5", choice2: "6"),
        Question(text: "9 + 7 = ?", choice1: "16", choice2: "17"),
        Question(text: "18 − 9 = ?", choice1: "9", choice2: "8"),
        Question(text: "9 + 8 = ?", choice1: "17", choice2: "18")]
    
    let gameQuestions1Lv3: [Question] = [Question(text: "2 − 1 = ?", choice1: "1", choice2: "2"),
        Question(text: "1 + 2 = ?", choice1: "3", choice2: "4"),
        Question(text: "0 × 9 = ?", choice1: "0", choice2: "9"),
        Question(text: "2 − 2 = ?", choice1: "0", choice2: "1"),
        Question(text: "2 + 3 = ?", choice1: "5", choice2: "6"),
        Question(text: "2 × 7 = ?", choice1: "14", choice2: "9"),
        Question(text: "3 − 1 = ?", choice1: "2", choice2: "3"),
        Question(text: "2 + 7 = ?", choice1: "9", choice2: "10"),
        Question(text: "2 × 9 = ?", choice1: "18", choice2: "7"),
        Question(text: "3 − 2 = ?", choice1: "1", choice2: "2"),
        Question(text: "3 + 5 = ?", choice1: "8", choice2: "9"),
        Question(text: "3 × 2 = ?", choice1: "6", choice2: "5"),
        Question(text: "0 ÷ 28 = ?", choice1: "0", choice2: "1"),
        Question(text: "4 − 2 = ?", choice1: "2", choice2: "3"),
        Question(text: "3 + 6 = ?", choice1: "9", choice2: "10"),
        Question(text: "9 ÷ 3 = ?", choice1: "3", choice2: "2"),
        Question(text: "5 − 3 = ?", choice1: "2", choice2: "3"),
        Question(text: "4 + 5 = ?", choice1: "9", choice2: "1"),
        Question(text: "3 × 9 = ?", choice1: "27", choice2: "12"),
        Question(text: "5 − 4 = ?", choice1: "1", choice2: "2"),
        Question(text: "4 + 7 = ?", choice1: "11", choice2: "12"),
        Question(text: "24 ÷ 6 = ?", choice1: "4", choice2: "6"),
        Question(text: "6 − 3 = ?", choice1: "3", choice2: "4"),
        Question(text: "5 + 7 = ?", choice1: "12", choice2: "13"),
        Question(text: "4 × 7 = ?", choice1: "28", choice2: "32"),
        Question(text: "6 − 4 = ?", choice1: "2", choice2: "3"),
        Question(text: "5 + 8 = ?", choice1: "13", choice2: "14"),
        Question(text: "28 ÷ 7 = ?", choice1: "4", choice2: "8"),
        Question(text: "6 − 5 = ?", choice1: "1", choice2: "2"),
        Question(text: "6 + 8 = ?", choice1: "14", choice2: "15"),
        Question(text: "5 × 8 = ?", choice1: "40", choice2: "13"),
        Question(text: "7 − 3 = ?", choice1: "4", choice2: "5"),
        Question(text: "7 + 1 = ?", choice1: "8", choice2: "9"),
        Question(text: "32 ÷ 4 = ?", choice1: "8", choice2: "7"),
        Question(text: "7 − 4 = ?", choice1: "3", choice2: "4"),
        Question(text: "7 + 4 = ?", choice1: "11", choice2: "12"),
        Question(text: "6 × 4 = ?", choice1: "24", choice2: "20"),
        Question(text: "7 − 5 = ?", choice1: "2", choice2: "3"),
        Question(text: "7 + 5 = ?", choice1: "12", choice2: "13"),
        Question(text: "36 ÷ 9 = ?", choice1: "4", choice2: "6"),
        Question(text: "7 − 7 = ?", choice1: "0", choice2: "1"),
        Question(text: "7 + 6 = ?", choice1: "13", choice2: "14"),
        Question(text: "6 × 6 = ?", choice1: "36", choice2: "12"),
        Question(text: "8 − 2 = ?", choice1: "6", choice2: "7"),
        Question(text: "8 + 3 = ?", choice1: "11", choice2: "12"),
        Question(text: "7 × 7 = ?", choice1: "49", choice2: "14"),
        Question(text: "8 − 5 = ?", choice1: "3", choice2: "4"),
        Question(text: "8 + 5 = ?", choice1: "13", choice2: "14"),
        Question(text: "8 × 2 = ?", choice1: "16", choice2: "10"),
        Question(text: "9 − 2 = ?", choice1: "7", choice2: "8"),
        Question(text: "8 + 6 = ?", choice1: "14", choice2: "15"),
        Question(text: "8 × 6 = ?", choice1: "48", choice2: "42"),
        Question(text: "9 − 3 = ?", choice1: "6", choice2: "7"),
        Question(text: "8 + 7 = ?", choice1: "15", choice2: "16"),
        Question(text: "8 × 8 = ?", choice1: "64", choice2: "48"),
        Question(text: "9 − 4 = ?", choice1: "5", choice2: "6"),
        Question(text: "8 + 8 = ?", choice1: "16", choice2: "18"),
        Question(text: "42 ÷ 7 = ?", choice1: "6", choice2: "7"),
        Question(text: "9 − 7 = ?", choice1: "2", choice2: "3"),
        Question(text: "8 + 9 = ?", choice1: "17", choice2: "18"),
        Question(text: "8 × 9 = ?", choice1: "72", choice2: "81"),
        Question(text: "11 − 6 = ?", choice1: "5", choice2: "6"),
        Question(text: "9 + 2 = ?", choice1: "11", choice2: "12"),
        Question(text: "48 ÷ 8 = ?", choice1: "6", choice2: "5"),
        Question(text: "11 − 7 = ?", choice1: "4", choice2: "5"),
        Question(text: "9 + 3 = ?", choice1: "12", choice2: "13"),
        Question(text: "9 × 4 = ?", choice1: "36", choice2: "13"),
        Question(text: "13 − 7 = ?", choice1: "6", choice2: "7"),
        Question(text: "9 + 6 = ?", choice1: "15", choice2: "16"),
        Question(text: "64 ÷ 8 = ?", choice1: "8", choice2: "16"),
        Question(text: "13 − 8 = ?", choice1: "5", choice2: "6"),
        Question(text: "9 + 7 = ?", choice1: "16", choice2: "17"),
        Question(text: "9 × 9 = ?", choice1: "81", choice2: "82"),
        Question(text: "18 − 9 = ?", choice1: "9", choice2: "8"),
        Question(text: "9 + 8 = ?", choice1: "17", choice2: "18"),
        Question(text: "72 ÷ 9 = ?", choice1: "8", choice2: "9")]
    
    let gameQuestions2Lv1: [Question] = [Question(text: "0 + 1 = 1", choice1: "1", choice2: ""),
        Question(text: "0 + 3 = 0", choice1: "0", choice2: ""),
        Question(text: "1 + 1 = 2", choice1: "1", choice2: ""),
        Question(text: "1 + 2 = 12", choice1: "0", choice2: ""),
        Question(text: "1 + 5 = 6", choice1: "1", choice2: ""),
        Question(text: "1 + 7 = 17", choice1: "0", choice2: ""),
        Question(text: "1 + 8 = 9", choice1: "1", choice2: ""),
        Question(text: "1 + 9 = 19", choice1: "0", choice2: ""),
        Question(text: "2 + 1 = 3", choice1: "1", choice2: ""),
        Question(text: "2 + 3 = 13", choice1: "0", choice2: ""),
        Question(text: "2 + 5 = 7", choice1: "1", choice2: ""),
        Question(text: "2 + 7 = 8", choice1: "0", choice2: ""),
        Question(text: "3 + 1 = 4", choice1: "1", choice2: ""),
        Question(text: "3 + 4 = 17", choice1: "0", choice2: ""),
        Question(text: "3 + 5 = 8", choice1: "1", choice2: ""),
        Question(text: "3 + 6 = 11", choice1: "0", choice2: ""),
        Question(text: "3 + 8 = 11", choice1: "1", choice2: ""),
        Question(text: "4 + 3 = 12", choice1: "0", choice2: ""),
        Question(text: "4 + 5 = 9", choice1: "1", choice2: ""),
        Question(text: "4 + 6 = 12", choice1: "0", choice2: ""),
        Question(text: "4 + 8 = 12", choice1: "1", choice2: ""),
        Question(text: "5 + 2 = 3", choice1: "0", choice2: ""),
        Question(text: "5 + 3 = 8", choice1: "1", choice2: ""),
        Question(text: "5 + 4 = 8", choice1: "0", choice2: ""),
        Question(text: "5 + 6 = 11", choice1: "1", choice2: ""),
        Question(text: "5 + 7 = 13", choice1: "0", choice2: ""),
        Question(text: "5 + 8 = 13", choice1: "1", choice2: ""),
        Question(text: "6 + 1 = 5", choice1: "0", choice2: ""),
        Question(text: "6 + 2 = 8", choice1: "1", choice2: ""),
        Question(text: "6 + 3 = 12", choice1: "0", choice2: ""),
        Question(text: "6 + 4 = 10", choice1: "1", choice2: ""),
        Question(text: "6 + 5 = 10", choice1: "0", choice2: ""),
        Question(text: "6 + 7 = 13", choice1: "1", choice2: ""),
        Question(text: "6 + 9 = 14", choice1: "0", choice2: ""),
        Question(text: "7 + 1 = 8", choice1: "1", choice2: ""),
        Question(text: "7 + 2 = 10", choice1: "0", choice2: ""),
        Question(text: "7 + 3 = 10", choice1: "1", choice2: ""),
        Question(text: "7 + 4 = 14", choice1: "0", choice2: ""),
        Question(text: "7 + 5 = 12", choice1: "1", choice2: ""),
        Question(text: "7 + 6 = 14", choice1: "0", choice2: ""),
        Question(text: "8 + 3 = 11", choice1: "1", choice2: ""),
        Question(text: "8 + 4 = 10", choice1: "0", choice2: ""),
        Question(text: "8 + 5 = 13", choice1: "1", choice2: ""),
        Question(text: "8 + 8 = 18", choice1: "0", choice2: ""),
        Question(text: "8 + 9 = 17", choice1: "1", choice2: ""),
        Question(text: "9 + 0 = 10", choice1: "0", choice2: ""),
        Question(text: "9 + 2 = 11", choice1: "1", choice2: ""),
        Question(text: "9 + 3 = 10", choice1: "0", choice2: ""),
        Question(text: "9 + 6 = 15", choice1: "1", choice2: ""),
        Question(text: "9 + 7 = 17", choice1: "0", choice2: "")]
    
    let gameQuestions2Lv2: [Question] = [Question(text: "0 + 7 = 0", choice1: "0", choice2: ""),
        Question(text: "1 + 5 = 6", choice1: "1", choice2: ""),
        Question(text: "2 + 5 = 7", choice1: "1", choice2: ""),
        Question(text: "2 + 7 = 8", choice1: "0", choice2: ""),
        Question(text: "3 + 4 = 17", choice1: "0", choice2: ""),
        Question(text: "3 + 8 = 11", choice1: "1", choice2: ""),
        Question(text: "4 + 3 = 12", choice1: "0", choice2: ""),
        Question(text: "4 + 5 = 9", choice1: "1", choice2: ""),
        Question(text: "4 + 6 = 12", choice1: "0", choice2: ""),
        Question(text: "5 + 4 = 8", choice1: "0", choice2: ""),
        Question(text: "5 + 7 = 13", choice1: "0", choice2: ""),
        Question(text: "6 + 4 = 10", choice1: "1", choice2: ""),
        Question(text: "6 + 7 = 13", choice1: "1", choice2: ""),
        Question(text: "6 + 9 = 14", choice1: "0", choice2: ""),
        Question(text: "7 + 4 = 14", choice1: "0", choice2: ""),
        Question(text: "7 + 5 = 12", choice1: "1", choice2: ""),
        Question(text: "7 + 6 = 14", choice1: "0", choice2: ""),
        Question(text: "8 + 3 = 11", choice1: "1", choice2: ""),
        Question(text: "8 + 5 = 13", choice1: "1", choice2: ""),
        Question(text: "8 + 8 = 18", choice1: "0", choice2: ""),
        Question(text: "8 + 9 = 17", choice1: "1", choice2: ""),
        Question(text: "9 + 2 = 11", choice1: "1", choice2: ""),
        Question(text: "9 + 7 = 17", choice1: "0", choice2: ""),
        Question(text: "1 − 1 = 0", choice1: "1", choice2: ""),
        Question(text: "2 − 0 = 0", choice1: "0", choice2: ""),
        Question(text: "3 − 1 = 2", choice1: "1", choice2: ""),
        Question(text: "3 − 3 = 6", choice1: "0", choice2: ""),
        Question(text: "4 − 2 = 2", choice1: "1", choice2: ""),
        Question(text: "5 − 1 = 6", choice1: "0", choice2: ""),
        Question(text: "5 − 3 = 2", choice1: "1", choice2: ""),
        Question(text: "6 − 3 = 9", choice1: "0", choice2: ""),
        Question(text: "6 − 4 = 2", choice1: "1", choice2: ""),
        Question(text: "6 − 5 = 11", choice1: "0", choice2: ""),
        Question(text: "7 − 2 = 5", choice1: "1", choice2: ""),
        Question(text: "7 − 3 = 10", choice1: "0", choice2: ""),
        Question(text: "7 − 6 = 1", choice1: "1", choice2: ""),
        Question(text: "8 − 3 = 11", choice1: "0", choice2: ""),
        Question(text: "8 − 4 = 4", choice1: "1", choice2: ""),
        Question(text: "9 − 1 = 9", choice1: "0", choice2: ""),
        Question(text: "9 − 7 = 2", choice1: "1", choice2: "")]
    
    // Not implement question.
    let gameQuestions2Lv3: [Question] = [Question(text: "8 + 9 = 17", choice1: "1", choice2: "")]
    
    let gameQuestions3Lv1: [Question] = [Question(text: "2 □ 1 = 1", choice1: "−", choice2: "+"),
        Question(text: "1 □ 2 = 3", choice1: "1", choice2: "+"),
        Question(text: "2 □ 2 = 0", choice1: "0", choice2: "+"),
        Question(text: "2 □ 3 = 5", choice1: "1", choice2: "+"),
        Question(text: "3 □ 1 = 2", choice1: "0", choice2: "+"),
        Question(text: "2 □ 7 = 9", choice1: "1", choice2: "+"),
        Question(text: "3 □ 2 = 1", choice1: "0", choice2: "+"),
        Question(text: "3 □ 5 = 8", choice1: "1", choice2: "+"),
        Question(text: "4 □ 2 = 2", choice1: "0", choice2: "+"),
        Question(text: "3 □ 6 = 9", choice1: "1", choice2: "+"),
        Question(text: "5 □ 3 = 2", choice1: "0", choice2: "+"),
        Question(text: "4 □ 5 = 9", choice1: "1", choice2: "+"),
        Question(text: "5 □ 4 = 1", choice1: "0", choice2: "+"),
        Question(text: "4 □ 7 = 11", choice1: "1", choice2: "+"),
        Question(text: "6 □ 3 = 3", choice1: "0", choice2: "+"),
        Question(text: "5 □ 7 = 12", choice1: "1", choice2: "+"),
        Question(text: "6 □ 4 = 2", choice1: "0", choice2: "+"),
        Question(text: "5 □ 8 = 13", choice1: "1", choice2: "+"),
        Question(text: "6 □ 5 = 1", choice1: "0", choice2: "+"),
        Question(text: "6 □ 8 = 14", choice1: "1", choice2: "+"),
        Question(text: "7 □ 3 = 4", choice1: "0", choice2: "+"),
        Question(text: "7 □ 1 = 8", choice1: "1", choice2: "+"),
        Question(text: "7 □ 4 = 3", choice1: "0", choice2: "+"),
        Question(text: "7 □ 4 = 11", choice1: "1", choice2: "+"),
        Question(text: "7 □ 5 = 2", choice1: "0", choice2: "+"),
        Question(text: "7 □ 5 = 12", choice1: "1", choice2: "+"),
        Question(text: "7 □ 7 = 0", choice1: "0", choice2: "+"),
        Question(text: "7 □ 6 = 13", choice1: "1", choice2: "+"),
        Question(text: "8 □ 2 = 6", choice1: "0", choice2: "+"),
        Question(text: "8 □ 3 = 11", choice1: "1", choice2: "+"),
        Question(text: "8 □ 5 = 3", choice1: "0", choice2: "+"),
        Question(text: "8 □ 5 = 13", choice1: "1", choice2: "+"),
        Question(text: "9 □ 2 = 7", choice1: "0", choice2: "+"),
        Question(text: "8 □ 6 = 14", choice1: "1", choice2: "+"),
        Question(text: "9 □ 3 = 6", choice1: "0", choice2: "+"),
        Question(text: "8 □ 7 = 15", choice1: "1", choice2: "+"),
        Question(text: "9 □ 4 = 5", choice1: "0", choice2: "+"),
        Question(text: "8 □ 8 = 16", choice1: "1", choice2: "+"),
        Question(text: "9 □ 7 = 2", choice1: "0", choice2: "+"),
        Question(text: "8 □ 9 = 17", choice1: "1", choice2: "+"),
        Question(text: "11 □ 6 = 5", choice1: "0", choice2: "+"),
        Question(text: "9 □ 2 = 11", choice1: "1", choice2: "+"),
        Question(text: "11 □ 7 = 4", choice1: "0", choice2: "+"),
        Question(text: "9 □ 3 = 12", choice1: "1", choice2: "+"),
        Question(text: "13 □ 7 = 6", choice1: "0", choice2: "+"),
        Question(text: "9 □ 6 = 15", choice1: "1", choice2: "+"),
        Question(text: "13 □ 8 = 5", choice1: "0", choice2: "+"),
        Question(text: "9 □ 7 = 16", choice1: "1", choice2: "+"),
        Question(text: "18 □ 9 = 9", choice1: "0", choice2: "+"),
        Question(text: "9 □ 8 = 17", choice1: "1", choice2: "+")]
    
    let gameQuestions3Lv2: [Question] = [Question(text: "11 □ 6 = 5", choice1: "0", choice2: "+")]
    
    let gameQuestions3Lv3: [Question] = [Question(text: "11 □ 6 = 5", choice1: "0", choice2: "+")]
    
    @IBOutlet weak var scoreLabel: WKInterfaceLabel!
    @IBOutlet weak var incorrectLabel: WKInterfaceLabel!
    @IBOutlet weak var statusLabel: WKInterfaceLabel!
    @IBOutlet weak var gameNameLabel: WKInterfaceLabel!
    @IBOutlet weak var questionLabel: WKInterfaceLabel!
    
    @IBOutlet weak var countdownLabel: WKInterfaceTimer!
    @IBOutlet weak var answer1Button: WKInterfaceButton!
    @IBOutlet weak var answer2Button: WKInterfaceButton!

    
    override func awakeWithContext(context: AnyObject?) {
        super.awakeWithContext(context)
        
        if let setting = context as? GameSetting {
            gameSetting = setting;
            if setting.isPractice {
                self.delegate = gameSetting.sender as? GameSelectionViewController
            }
            else {
                self.mainGameDelegate = gameSetting.sender as? InterfaceController
            }
            
            switch(setting.gameMode){
            case 0:
                self.gameNameLabel.setText(String(format: "Speed Cal LV %d", setting.level))
                break
            case 1:
                self.gameNameLabel.setText(String(format: "True or False LV %d", setting.level))
                break
            case 2:
                self.gameNameLabel.setText(String(format: "Operators LV %d", setting.level))
                break
            default:
                self.gameNameLabel.setText("")
            }
            
            self.isPractice = setting.isPractice
            
            incorrectLabel.setAlpha(0.0)
            statusLabel.setText("")
            answer1Button.setBackgroundColor(defaultColor)
            answer2Button.setBackgroundColor(defaultColor)
            answer1Button.setTitle("")
            answer2Button.setTitle("")
            // set countdown label.
            var date = NSDate(timeIntervalSinceNow: 31)
            countdownLabel.setDate(date)

            countDownTimer = NSTimer.scheduledTimerWithTimeInterval(1.0,
                target: self,
                selector: Selector("countdown"),
                userInfo: nil,
                repeats: true)
            //getQuestion()
        }
    }
    
    override func willActivate() {
        // This method is called when watch view controller is about to be visible to user
        super.willActivate()
    }
    
    override func didDeactivate() {
        // This method is called when watch view controller is no longer visible
        if countDownTimer != nil {
            countDownTimer.invalidate()
            countDownTimer = nil
        }
        if gameTimer != nil {
            gameTimer.invalidate()
            gameTimer = nil
        }
        super.didDeactivate()
    }
    
    @IBAction func answer1Click() {
        //answer1Button.setBackgroundColor(selectedColor)
        updateScore(trueSide == 0)
    }
    
    @IBAction func answer2Click() {
        //answer2Button.setBackgroundColor(selectedColor)
        updateScore(trueSide == 1)
    }
    
    func updateScore(correct: Bool){
        
        if correct {
            self.bonusProgress++
            var bonusGain: Bool = false
            if self.bonusProgress == 5 && !self.isPractice  {
                self.bonusProgress = 0
                self.star++
                bonusGain = true
                var str = ""
                for var index = 0; index < star; ++index {
                    str = str  + "★"
                }
                gameNameLabel.setText(str)
            }
            let plus = bonusGain ? gameSetting.level * 2 : gameSetting.level
            statusLabel.setText(String(format: "+%d", plus)) //"+1")
            score += plus //score++
            scoreLabel.setText(String(format: "Score: %d", score))
            correctCount++;
        }
        else {
            self.bonusProgress = 0
            incorrectLabel.setAlpha(1.0)
            statusLabel.setTextColor(UIColor.redColor())
            let minus = gameSetting.level
            statusLabel.setText(String(format: "-%d", minus)) //"+1")
            //statusLabel.setText("-1")
            score -= minus
            if score < 0 {
                score = 0
            }
            scoreLabel.setText(String(format: "Score: %d", score))
            incorrect++
            incorrectLabel.setText(String(format: "X: %d", incorrect))

        }
        NSTimer.scheduledTimerWithTimeInterval(0.5,
            target: self,
            selector: Selector("clearStat"),
            userInfo: nil,
            repeats: false)
        
        answer1Button.setEnabled(false)
        answer2Button.setEnabled(false)
        if !isGameOver {
            getQuestion()
        }
    }
    
    func clearStat() {
        statusLabel.setTextColor(UIColor.whiteColor())
        statusLabel.setText("")
    }
    
    func countdown() {
        if countDown == 0 {
            // invalidate and stop timer.
            gameNameLabel.setText("") // ★★★
            countDownTimer.invalidate()
            countDownTimer = nil
            var date = NSDate(timeIntervalSinceNow: 31)
            countdownLabel.setDate(date)
            countdownLabel.start()
            self.bonusProgress = 0
            self.correctCount = 0
            gameTimer = NSTimer.scheduledTimerWithTimeInterval(30.0,
                target: self,
                selector: Selector("gameOver"),
                userInfo: nil,
                repeats: false)
            getQuestion()
        }
        else {
            questionLabel.setText(String(format:"%d", countDown))
            countDown--
        }
    }
    
    func gameOver(){
        isGameOver = true
        answer1Button.setEnabled(false)
        answer2Button.setEnabled(false)
        
        if self.star >= 3 {
            self.bonusMode = 4
            let option = GameSetting(gameMode:3, isPractice: false, level: gameSetting.level, firstTime: false, hiscore: 0, score: 0, sender: self)
            pushControllerWithName("Low2High", context: option)
        }
        else {
            questionLabel.setText("Game Over")
            
            NSTimer.scheduledTimerWithTimeInterval(3.0,
                target: self,
                selector: Selector("goToSummaryPage"),
                userInfo: nil,
                repeats: false)
        }
    }
    
    func bonusEndDelegate(score: Int){
        popController()
        self.score = self.score + score
        questionLabel.setText("Game Over")
        
        NSTimer.scheduledTimerWithTimeInterval(3.0,
            target: self,
            selector: Selector("goToSummaryPage"),
            userInfo: nil,
            repeats: false)
    }
    
    func goToSummaryPage(){
        let scoreCard = GameScore(score : self.score, correct: self.correctCount, incorrect: self.incorrect, star: self.star, level : gameSetting.level, gameMode: gameSetting.gameMode, bonusMode: self.bonusMode)
        
        if gameSetting.isPractice {
            self.delegate?.gameOverDelegate(scoreCard)
        }
        else {
            self.mainGameDelegate?.gameOverDelegate(scoreCard)
        }
        //pushControllerWithName("Summary",context: scoreCard)
    }
    
    func getQuestion() {
        var q: Question?
        
        if gameSetting.gameMode == 0 {
            trueSide = randomNumberBetween(0, max: 1)
            if(gameSetting.level == 1){
                let rand = randomNumberBetween(0, max: gameQuestions1Lv1.count - 1)
                q = gameQuestions1Lv1[rand]
            }
            else if(gameSetting.level == 2){
                let rand = randomNumberBetween(0, max: gameQuestions1Lv2.count - 1)
                q = gameQuestions1Lv2[rand]
            }
            else {
                let rand = randomNumberBetween(0, max: gameQuestions1Lv3.count - 1)
                q = gameQuestions1Lv3[rand]
            }
            if(q != nil){
                button1Title = trueSide == 0 ? q?.choice1 : q?.choice2
                button2Title = trueSide == 0 ? q?.choice2 : q?.choice1
            }
            
        }
        else if gameSetting.gameMode == 1 {
            if(gameSetting.level == 1){
                let rand = randomNumberBetween(0, max: gameQuestions2Lv1.count - 1)
                q = gameQuestions2Lv1[rand]
            }
            else if(gameSetting.level == 2){
                let rand = randomNumberBetween(0, max: gameQuestions2Lv2.count - 1)
                q = gameQuestions2Lv2[rand]
            }
            else {
                let rand = randomNumberBetween(0, max: gameQuestions2Lv3.count - 1)
                q = gameQuestions2Lv3[rand]
            }
            if q != nil {
                trueSide = q?.choice1 == "1" ? 0 : 1
                button1Title = "✓" // "True"
                button2Title = "✕" // "False"
            }
        }
        else if gameSetting.gameMode == 2 {
            if(gameSetting.level == 1){
                let rand = randomNumberBetween(0, max: gameQuestions3Lv1.count - 1)
                q = gameQuestions3Lv1[rand]
            }
            else if(gameSetting.level == 2){
                let rand = randomNumberBetween(0, max: gameQuestions3Lv2.count - 1)
                q = gameQuestions3Lv2[rand]
            }
            else {
                let rand = randomNumberBetween(0, max: gameQuestions3Lv3.count - 1)
                q = gameQuestions3Lv3[rand]
            }
            if q != nil {
                
                trueSide = q?.choice1 == "1" ? 0 : 1
                button1Title = q?.choice2 == "+" ? "+" : "×"
                button2Title = q?.choice2 == "+" ? "−" : "÷"
            }
        }
        
        if q != nil {
            questionLabel.setText(q?.text)
            answer1Button.setTitle(button1Title)
            answer2Button.setTitle(button2Title)
            answer1Button.setEnabled(true)
            answer2Button.setEnabled(true)
        }
    }
    
    func randomNumberBetween(min: Int, max: Int) -> Int {
        return Int(arc4random_uniform(UInt32(max - min + 1))) + min
    }
}
